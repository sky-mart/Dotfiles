#+TITLE: My Emacs Configuration
#+AUTHOR: Vlad Agievich
#+EMAIL: sky-mart@hotmail.com
#+PROPERTY header-args :tangle "~/.emacs.d/init.el"

* Export
#+begin_src emacs-lisp :tangle no
(org-babel-tangle)
(copy-file "~/Dotfiles/emacs/init.el" "~/.emacs.d/init.el" t)
#+end_src

* Basic UI
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; User Interface
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1)   ; Disable the toolbar
  ;; (tooltip-mode -1)    ; Disable tooltips
  (set-fringe-mode 10) ; Give some breathing room
  ;; (menu-bar-mode -1)   ; Disable the menubar

  ;; (set-face-attribute 'default nil :font "Fira Code

  ;; Font size 13.5 pt
  ;; (set-face-attribute 'default nil :height 135)
#+END_SRC

* Behavior
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Store custom-file separately, don't freak out when it's not found
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)

  ;; create the autosave dir if necessary, since emacs won't.
  (make-directory "~/.emacs.d/autosaves/" t)

  ;; Backup behavior
  ;; Put autosave files (ie #foo#) and backup files (ie foo~) in ~/.emacs.d/.
  (custom-set-variables
   '(auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/\\1" t)))
   '(backup-directory-alist '((".*" . "~/.emacs.d/backups/"))))

  ;; start week from Monday
  (setq calendar-week-start-day 1)

  ;; set timestamps to English
  (setq system-time-locale "C")

  ;; Map Cmd to be Meta
  (setq mac-command-modifier 'meta)

  (setq-default word-wrap t) ; Enable word wrap

  (defun linum () (display-line-numbers-mode 1))
  (add-hook 'prog-mode-hook 'linum)

  ;;(column-number-mode)
  (delete-selection-mode 1)
  (global-superword-mode 1)

  ;; Always wrap lines
  (global-visual-line-mode 1)

  ;; Highlight the current line
  (global-hl-line-mode 1)

  ;; auto revert
  (global-auto-revert-mode 1)

  ;; Never use tabs, use spaces instead.
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq tab-width 4)

  ;; Delete trailing spaces and add new line in the end of a file on save.
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq require-final-newline t)

  ;; C-x, C-c, C-v for cut, copy, paste
  ;; (cua-mode t)

  (setq apropos-sort-by-scores t) ; Sort apropos results by relevancy

  ;; Comment line or region.
  (global-set-key (kbd "C-/") 'comment-line)

  (global-set-key (kbd "C-x C-h") 'previous-buffer)
  (global-set-key (kbd "C-x C-l") 'next-buffer)

  (global-set-key (kbd "C-{") 'shrink-window-horizontally)
  (global-set-key (kbd "C-}") 'enlarge-window-horizontally)

  (global-unset-key (kbd "C-<down-mouse-1>"))
  (global-unset-key (kbd "<down-mouse-8>"))
  (global-unset-key (kbd "<down-mouse-9>"))

  (defun display-ansi-colors ()
    (interactive)
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))

  (defun split-focus-right ()
    "Open the same file to the right"
    (interactive)
    (split-window-right)
    (other-window 1))

  (defun split-focus-below ()
    "Open the same file below"
    (interactive)
    (split-window-below)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'split-focus-below)
  (global-set-key (kbd "C-x 3") 'split-focus-right)
#+END_SRC

* Package setup
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  ;;(unless package-archive-contents
    ;;(package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  ;; Try package without installation
  (use-package try)
#+END_SRC

* General purpose packages
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Emacs bindings with the russian keyboard
  (use-package reverse-im
    :config
    (reverse-im-activate "russian-computer"))

  ;; enable Mac OS X path
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))

  ;; We need Emacs kill ring and system clipboard to be independent. Simpleclip is the solution to that.
  ;; (use-package simpleclip
  ;;   :config
  ;;   (simpleclip-mode 1))

  ;; Linear undo and redo.
  (use-package undo-fu
    :config
    (global-set-key (kbd "C-z") 'undo-fu-only-undo)
    (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))

  (use-package smex)  ;; show recent commands when invoking Alt-x (or Cmd+Shift+p)

  ;; Multiple cursors. Similar to Sublime or VS Code.
  (use-package multiple-cursors
    :config
    (setq mc/always-run-for-all 1)
    (global-set-key (kbd "M-3") 'mc/mark-next-like-this)
    (global-set-key (kbd "M-4") 'mc/edit-beginnings-of-lines)
  ;;  (global-set-key (kbd "M-s-d") 'mc/edit-beginnings-of-lines)
    (define-key mc/keymap (kbd "<return>") nil))

  (use-package move-text
    :config
    (move-text-default-bindings))

  ;; Upcase and lowercase word or region, if selected.
  ;; To capitalize or un-capitalize word use Alt+c and Alt+l
  (global-set-key (kbd "M-u") 'upcase-dwim)   ;; Alt+u upcase
  (global-set-key (kbd "M-l") 'downcase-dwim) ;; Alt-l lowercase
#+END_SRC

* Help
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Interactive help with key bindings
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.5))

  ;; Better help
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

* UI packages
#+BEGIN_SRC emacs-lisp :tangle yes
  ; UI theme
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; (load-theme 'doom-outrun-electric t)
    (load-theme 'doom-nord t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;; NOTE: The first time you load your configuration on a new machine, you'll
  ;; need to run the following command interactively so that mode line icons
  ;; display correctly:
  ;;
  ;; M-x all-the-icons-install-fonts

  (use-package all-the-icons)

  ;; Beautiful bottom line
  (use-package doom-modeline
    :init (doom-modeline-mode 1))

  ;; Colorful brackets
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; replace switch-window mechanism
  (use-package ace-window
    :init
    (progn
      (setq aw-scope 'global) ;; was frame
      (global-set-key (kbd "C-x O") 'other-frame)
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))

  (winner-mode 1) ;; Window configurations
#+END_SRC

* Completion and search
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Completion mechanism
  (use-package ivy
    :diminish ivy-mode
    :bind (("C-s" . swiper)
           ("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (setq ivy-magic-slash-non-match-action nil))

  ;; Additional help
  (use-package ivy-rich
    :after ivy
    :config
    (ivy-rich-mode 1)
    (setq ivy-rich-path-style 'abbrev))

  ;; (use-package ivy-posframe
  ;;   :ensure t
  ;;   :delight
  ;;   :custom
  ;;   (ivy-posframe-parameters
  ;;    '((left-fringe . 2)
  ;;      (right-fringe . 2)
  ;;      (internal-border-width . 2)))
  ;;   (ivy-posframe-height-alist
  ;;    '((swiper . 15)
  ;;      (swiper-isearch . 15)
  ;;      (t . 10)))
  ;;   (ivy-posframe-display-functions-alist
  ;;    '((complete-symbol . ivy-posframe-display-at-point)
  ;;      (swiper . nil)
  ;;      (swiper-isearch . nil)
  ;;      (t . ivy-posframe-display-at-frame-center)))
  ;;   :config
  ;;   (ivy-posframe-mode 1))

  ;; Part of ivy?
  (use-package counsel
    :bind (("M-x" . counsel-M-x))
    :config
    (counsel-mode 1))

  (use-package flx)   ;; enable fuzzy matching
  (use-package avy)   ;; enable avy for quick navigation

  (use-package fzf
    :bind
    ;; Don't forget to set keybinds!
    :config
    (setq
      fzf/args "-x --color bw --print-query --margin=1,0 --no-hscroll"
      fzf/executable "fzf"
      fzf/git-grep-args "-i --line-number %s"
      ;; command used for `fzf-grep-*` functions
      ;; example usage for ripgrep:
      ;; fzf/grep-command "rg --no-heading -nH"
      fzf/grep-command "grep -nrH"
      ;; If nil, the fzf buffer will appear at the top of the window
      fzf/position-bottom t
      fzf/window-height 15))
#+END_SRC

* Project management
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun grep-without-test-and-mock (pattern)
    (interactive "sPattern: ")
    (projectile-ripgrep pattern "-g \!\*test"))

  ;; Project management
  (use-package projectile
    :diminish projectile-mode
    :config
    (projectile-global-mode)
    :custom (projectile-completion-system 'ivy)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    ;; (when (file-directory-p "~/Projects")
      ;; (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action 'projectile-dired))

  (use-package projectile-ripgrep
    :bind
    ("C-S-f" . 'projectile-ripgrep))

  (use-package counsel-projectile
    :bind
    ("M-o" . 'counsel-projectile-find-file)
    :config (counsel-projectile-mode))

  (use-package dashboard
    :config
    (setq dashboard-items '((projects . 5)
                            (recents  . 5)))
    (dashboard-setup-startup-hook))
#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package transient)

  (transient-define-suffix magit-push-to-gerrit ()
    "Push to Gerrit"
    :description "to gerrit"
    (interactive)
    (magit-push-refspecs "origin" "HEAD:refs/for/master" nil))

  (transient-define-suffix magit-pull-from-master ()
    "Pull from master"
    :description "master"
    (interactive)
    (magit-pull-branch "origin/master" (magit-pull-arguments)))

  (use-package magit
    :config
    (transient-append-suffix 'magit-push "t"
      '("g" magit-push-to-gerrit))
    (transient-append-suffix 'magit-pull "e"
      '("M" magit-pull-from-master)))
#+END_SRC

* Development
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; File tree
  (use-package treemacs)

  ;; Development
  (use-package lsp-mode
    :hook
    ((c-mode c++-mode) lsp)
    :init
    (setq lsp-keymap-prefix "C-l"))

  (use-package lsp-treemacs)

  (use-package lsp-ivy)

  (use-package dap-mode)

  (use-package company
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package yasnippet
    :config
    (yas-global-mode 1)
    (add-to-list 'company-backends 'company-yasnippet))

  (use-package yasnippet-snippets)
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; requires python packages python-lsp-server and debugpy

  (use-package python-mode
    :hook
    (python-mode . lsp-deferred)
    :custom
    ((python-shell-interpreter "python3")
    (lsp-pylsp-plugins-pydocstyle-enabled nil)
    (dap-python-executable "python3")
    (dap-python-debugger 'debugpy))
    :config
    (require 'dap-python))

  (use-package auto-virtualenv
    :init
    (use-package pyvenv
      :config
      (setenv "WORKON_HOME" "/home/vlad/Documents/Dev/Languages/Python")
      (setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] "))))
    :config
    (add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)
    (add-hook 'projectile-after-switch-project-hook 'auto-virtualenv-set-virtualenv)  ;; If using projectile
    )
#+END_SRC

** C++
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq c-default-style "user")

  ;; formatting
  (use-package clang-format+
    :bind (("M-n" . clang-format-region)))

  ;; for pure C projects remove in .dir_locals
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (c-set-offset 'innamespace '0)
  ;; (electric-pair-mode)

  (add-hook 'c-mode-hook 'lsp-deferred)
  (add-hook 'c++-mode-hook 'lsp-deferred)

  ;; (use-package company-lsp)

  ;; on Linux one needs to install Mono to debug
  (require 'dap-cpptools)

  ;; (use-package company-irony
  ;; :config
  ;; (add-to-list 'company-backends 'company-irony))

  ;; Code completion, syntax checking
  ;; (use-package irony
  ;; :config
  ;; (add-hook 'c++-mode-hook 'irony-mode)
  ;; (add-hook 'c-mode-hook 'irony-mode)
  ;; (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;; RTags C++ Analyzer
  (use-package rtags
   :config (define-key c-mode-base-map (kbd "C-M-h") nil)
   :bind (("M-." . rtags-find-symbol-at-point)
          ("C-<mouse-1>" . rtags-find-symbol-at-point)
          ("M-," . rtags-find-references-at-point)
          ("C-M-," . rtags-find-all-references-at-point)
          ("C-M-h" . rtags-location-stack-back)
          ("<mouse-8>" . rtags-location-stack-back)
          ("C-M-l" . rtags-location-stack-forward)
          ("<mouse-9>" . rtags-location-stack-forward)))


  (use-package company-rtags
   :config
   (add-to-list 'company-backends 'company-rtags))

  ;; bake syntax highlighting
  (load-file "~/.emacs.d/bake-mode.el")
#+END_SRC

** Ruby
#+begin_src emacs-lisp :tangle yes
;; requires gem install solargraph
(add-hook 'ruby-mode-hook 'lsp-deferred)
#+end_src

* Org
#+begin_src emacs-lisp :tangle yes

(require 'org-habit)

;; Some basic Org defaults

(add-to-list 'org-modules 'org-habit t)
(setq org-habit-show-all-today t)
(setq org-startup-indented t)         ;; Visually indent sections. This looks better for smaller files.
(setq org-src-tab-acts-natively t)    ;; Tab in source blocks should act like in major mode
(setq org-src-preserve-indentation t)
(setq org-log-into-drawer t)          ;; State changes for todos and also notes should go into a Logbook drawer
(setq org-src-fontify-natively t)     ;; Code highlighting in code blocks
(setq org-log-done 'time)             ;; Add closed date when todo goes to DONE state
(setq org-support-shift-select t)    ;; Allow shift selection with arrows.


;; Store all my org files in ~/org.
(setq org-directory "/media/Notes")

;; And all of those files should be in included agenda.
(setq org-agenda-files '("/media/Notes"))

#+end_src
* PlantUML
#+begin_src emacs-lisp :tangle yes
  (use-package plantuml-mode
    :config
    (setq plantuml-jar-path "/home/vlad/.local/bin/plantuml-1.2023.5.jar")
    (setq plantuml-default-exec-mode 'jar))
#+end_src
